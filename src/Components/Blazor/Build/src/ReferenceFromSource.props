<Project>

  <Import Project="ReferenceBlazorBuildFromSource.props" />

  <!--
    Debugging support using blazor-devserver serve.

    A few things to note here:
      - We have to use dotnet exec to avoid launching another process and confusing the debugger.
      - Since we're doing dotnet exec, it won't automatically rebuild the DevServer project.
      - $(AdditionalRunArguments) needs to be defined before importing this file.
   -->
  <PropertyGroup>
    <RunCommand>dotnet</RunCommand>
    <_BlazorCliLocation>$(MSBuildThisFileDirectory)../../DevServer/src/bin/$(Configuration)/$(DefaultNetCoreTargetFramework)/blazor-devserver.dll</_BlazorCliLocation>
    <RunArguments>exec &quot;$(_BlazorCliLocation)&quot; serve --applicationpath &quot;$(MSBuildProjectDirectory)/$(OutputPath)$(TargetFileName)&quot; $(AdditionalRunArguments)</RunArguments>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="Microsoft.AspNetCore.Blazor.Mono" />
  </ItemGroup>

  <Target Name="_BuildBlazorBuildProject" BeforeTargets="ResolveProjectReferences">
    <!--
      The Blazor.Build project cross-compiles and we need the output of all TFMs to be available in the build output.
      We can't represent this in any good way using ProjectReference elements, but we can try and build it instead.
    -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)Microsoft.AspNetCore.Blazor.Build.csproj" />
  </Target>

  <!-- This is used as a P2P when building the repo. Normal Blazor projects will get this as a reference through the Blazor.Build package -->
  <ItemGroup>
    <!-- Ensures these projects are built before the consuming project, but without
         adding a runtime dependency on the .dll (to be equivalent to a <PackageDependency>
         given that the packed version of this project wouldn't add a .dll reference) -->
    <ProjectReference Include="$(MSBuildThisFileDirectory)Microsoft.AspNetCore.Blazor.Build.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <Properties>TargetFramework=$(DefaultNetCoreTargetFramework)</Properties>
    </ProjectReference>
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\DevServer\src\Microsoft.AspNetCore.Blazor.DevServer.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <!-- Optimization. Do not require framework compatibility between these projects. -->
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <UndefineProperties>TargetFramework</UndefineProperties>
    </ProjectReference>
  </ItemGroup>
</Project>
